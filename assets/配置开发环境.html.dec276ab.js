import{_ as d,r as t,o as r,c as l,a as e,b as a,d as s,e as i}from"./app.37a6fc76.js";const o={},c=i('<h1 id="配置开发环境" tabindex="-1"><a class="header-anchor" href="#配置开发环境" aria-hidden="true">#</a> 配置开发环境</h1><h1 id="vue的配置和使用" tabindex="-1"><a class="header-anchor" href="#vue的配置和使用" aria-hidden="true">#</a> <strong>Vue的配置和使用</strong></h1><h1 id="配置环境" tabindex="-1"><a class="header-anchor" href="#配置环境" aria-hidden="true">#</a> <strong>配置环境</strong></h1><h1 id="一、安装node-js" tabindex="-1"><a class="header-anchor" href="#一、安装node-js" aria-hidden="true">#</a> <strong>一、安装node.js</strong></h1>',4),u={href:"https://nodejs.org/en/download/",target:"_blank",rel:"noopener noreferrer"},p={href:"https://nodejs.org/en/download/releases/",target:"_blank",rel:"noopener noreferrer"},v=i(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>官网：https://nodejs.org/en/download/
历史版本：https://nodejs.org/en/download/releases/

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Node是否安装完成</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node -v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>npm是否可以使用</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm -v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>npm更新版本</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install npm -g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="二、设置nodejs-prefix-全局-和cache-缓存-路径" tabindex="-1"><a class="header-anchor" href="#二、设置nodejs-prefix-全局-和cache-缓存-路径" aria-hidden="true">#</a> <strong>二、设置nodejs prefix（全局）和cache（缓存）路径</strong></h1><p>1、在nodejs安装路径下，新建node_global和node_cache两个文件夹</p><p>2、设置缓存文件夹，设置全局模块存放路径</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm config set cache &quot;D:\\vueProject\\nodejs\\node_cache&quot;

npm config set prefix &quot;D:\\vueProject\\nodejs\\node_global&quot;

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="三、基于-node-js-安装cnpm-淘宝镜像" tabindex="-1"><a class="header-anchor" href="#三、基于-node-js-安装cnpm-淘宝镜像" aria-hidden="true">#</a> <strong>三、基于 Node.js 安装cnpm（淘宝镜像）</strong></h1><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install -g cnpm --registry=https://registry.npm.taobao.org
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong><strong>执行命令nrm ls查看可选的源</strong></strong></p><p>npm 安装 nrm</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install nrm -g
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>其中，带*的是当前使用的源;如果要切换到taobao源，执行命令nrm use taobao。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>nrm ls
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>增加定制的源，特别适用于添加企业内部的私有源，执行命令 nrm add &lt;registry&gt; &lt;url&gt;，其中reigstry为源名，url为源的路径。删除源。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// 增加源
nrm add registry http://registry.npm.frp.trmap.cn/

// 删除源
nrm del

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="四、设置环境变量" tabindex="-1"><a class="header-anchor" href="#四、设置环境变量" aria-hidden="true">#</a> <strong>四、设置环境变量</strong></h1><p>说明：设置环境变量可以使得住任意目录下都可以使用cnpm、vue等命令，而不需要输入全路径</p><p>1、鼠标右键&quot;此电脑&quot;，选择“属性”菜单，在弹出的“系统”对话框中左侧选择“高级系统设置”，弹出“系统属性”对话框。</p><p>2、修改系统变量PATH</p><p>3、新增系统变量NODE_PATH</p><h1 id="五、安装vue脚手架" tabindex="-1"><a class="header-anchor" href="#五、安装vue脚手架" aria-hidden="true">#</a> <strong>五、安装Vue脚手架</strong></h1><p><strong><strong>安装vue脚手架</strong></strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install @vue/cli-init -g

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><strong>安装最新版vue脚手架</strong></strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install @vue/cli -g

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><strong>安装最新版vue脚手架后可以通过命令行和可视化界面创建vue项目</strong></strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vue ui
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>等待自动打开浏览器管理页面即可。</p><h1 id="六、检查是否安装完成" tabindex="-1"><a class="header-anchor" href="#六、检查是否安装完成" aria-hidden="true">#</a> <strong>六、检查是否安装完成</strong></h1><p>Node是否安装完成</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node -v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>npm是否可以使用</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm -v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>cnpm是否可以使用</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cnpm -v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>yarn是否可以使用</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn -v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Vue脚手架是否安装完成（大写的V）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vue -V
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Vue脚手架包含的功能</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>vue -h
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="七、包管理工具" tabindex="-1"><a class="header-anchor" href="#七、包管理工具" aria-hidden="true">#</a> <strong>七、包管理工具</strong></h1><p><strong><strong>一般有以下几种</strong></strong></p><ul><li>npm</li><li>yarn</li><li>pnpm</li><li>cnpm</li></ul><p><strong><strong>npm</strong></strong></p><blockquote><p>安装（install）即下载包。由于 npm 的官方 registry 服务器位于国外，可能受网速影响导致下载缓慢或失败。</p></blockquote><p><strong>本地安装（install 可以简写为 i）</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install 包名
npm i 包名

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>全局安装</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install --global 包名
npm i -g 包名

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>是否安装成功</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm -v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong><strong>yarn</strong></strong></p><blockquote><p>yarn 是由Facebook、Google、Exponent 和 Tilde 联合推出了一个新的 JS 包管理工具，它仍然使用 npm 的registry，不过提供了全新 CLI 来对包进行管理</p></blockquote><ul><li>1、通过并行下载提高了包的下载速度</li><li>2、引入了 yarn.lock 文件，存储包之间的依赖关系，保证成员之间的包版本一致</li><li>3、有了 yarn.lock 文件，不用每次计算各个包之间的版本依赖，安装速度更快等等</li></ul><p><strong>安装</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install -g yarn
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>是否安装成功</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn -v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>初始化</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn init [--yes/-y]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>常用命令</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 初始化一个项目
yarn init
# 装包
yarn add packagename
yarn add packagename --dev
# 更新包
yarn upgrade packagename
# 删除包
yarn remove packagename
# 安装所有包
yarn
yarn install
# 发布包
yarn publish
# 查看包的缓存列表
yarn cache list
# 全局安装包 == npm -g
yarn global

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><strong>pnpm</strong></strong></p><blockquote><p>pnpm是一种新起的包管理器，从npm的下载量看，目前还没有超过yarn，但它的实现方式值得主流包管理器学习，某些开发者极力推荐使用pnpm</p></blockquote><p>从结果上来看，它具有以下优势：</p><ul><li>目前，安装效率高于npm和yarn的最新版</li><li>极其简洁的node_modules目录</li><li>避免了开发时使用间接依赖的问题</li><li>能极大的降低磁盘空间的占用</li></ul><p><strong>安装</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install -g pnpm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>使用</strong></p><p>后续使用把npm改成pnpm即可。</p><p><strong><strong>cnpm</strong></strong></p><blockquote><p>npm 的默认官方下载源是 https://registry.npmjs.org/，国内访问经常掉线。因此淘宝推出了淘宝源 https://registry.npm.taobao.org</p></blockquote><p><strong>安装</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>npm install -g cnpm --registry=https://registry.npm.taobao.org

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>是否安装成功</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>cnpm -v
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>后续使用把npm改成cnpm即可。</p><p>cnpm 的坑：package-lock.json是用来锁定安装时的包的版本号，如果之前用 npm 安装产生了package-lock.json，后面再用cnpm来安装package.json、package-lock.json安装可能会跟你安装的依赖包不一致，这是因为 cnpm 不受package-lock.json影响，只会根据package.json进行下载。</p><p><strong><strong>总结</strong></strong></p><blockquote><p>当然，如果接手一个已有的项目，发现已存在package-lock.json文件就使用 npm，发现有yarn.lock文件就选用yarn，来防止和同事的包版本不一致</p></blockquote><h1 id="八、编辑器" tabindex="-1"><a class="header-anchor" href="#八、编辑器" aria-hidden="true">#</a> <strong>八、编辑器</strong></h1><p><strong><strong>常见编辑器</strong></strong></p><ul><li>Visual Studio Code</li><li>HBuilder</li><li>Sublime Text</li><li>WebStorm</li></ul><p><strong><strong>Visual Studio Code</strong></strong></p><blockquote><p>Visual Studio Code软件功能非常强大，界面简洁明晰、操作方便快捷，设计得很人性化。软件主要改进了文档视图，完善了对 Markdown的支持，新增PHP语法高亮。</p></blockquote><p>微软在2015年4月30日Build 开发者大会上正式宣布了 Visual Studio Code 项目：一个运行于 Mac OS X、Windows和 Linux 之上的，针对于编写现代 Web 和云应用的跨平台源代码编辑器。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>下载地址：https://code.visualstudio.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>建议安装插件来增强编辑器的可用性和美观性。</p><p><strong><strong>HBuilder</strong></strong></p><blockquote><p>前端开发小白入门首选，hbuilder是国产的一款前端开发工具而且是免费的，对于英语不好的前端工程师是一个不错的消息。</p></blockquote><p>优点是有强大的其他语言支持和开发webapp等功能，强大到没朋友。在语法提示、转到定义、重构、调试等方面都非常高效。缺点也是有一些的，就是其有些稳定，有时可能会有些卡顿的现象，希望官方修复。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>下载地址：http://www.dcloud.io/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong><strong>Sublime Text</strong></strong></p><blockquote><p>Sublime Text是一个轻量级的编辑器，也是支持各种编程语言，Sublime Text所有的强大功能都是支持插件的，而且快捷键十分的好用，可以极大的减少开发的劳动程度，使用Sublime就是要使用其快捷键和插件。</p></blockquote><p>Sublime Text3的优点的轻量级但是功能强大，优雅小巧启动速度快，有着丰富的第三方支持，能够满足各种各样的扩展缺点是对于项目的管理等不是很方便，但代码提示不如hubuilder强大。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>下载地址：http://www.sublimetext.com/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong><strong>WebStorm</strong></strong></p><blockquote><p>WebStorm 是jetbrains公司旗下一款JavaScript 开发工具。官方提供的插件支持，满足许多不会配置的同学，ESlint，词法高亮，emmet，CSS预处理器，新版本也添加了对ES6的支持，内建了服务器调试。</p></blockquote><p>目前已经被广大中国JS开发者誉为“Web前端开发神器”、“最强大的HTML5编辑器”、“最智能的JavaScript IDE”等。与IntelliJ IDEA同源，继承了IntelliJ IDEA强大的JS部分的功能。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>下载地址：https://www.jetbrains.com/webstorm/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="九、工具" tabindex="-1"><a class="header-anchor" href="#九、工具" aria-hidden="true">#</a> <strong>九、工具</strong></h1><p><strong><strong>Postman</strong></strong></p><ul><li>在项目开发过程中，经常会遇到前端或后端开发工作延迟，可能阻碍测试团队有效地完成工作的问题。</li><li>那么，在多个接口相互依赖，且接口文档及接口的响应数据都比较完善的情况下，不调用依赖接口测试当前接口呢？</li><li>Postman很好的解决了这一问题，它可以mock模拟依赖接口的返回值，这样就可以专注的测试当前接口。</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>官网：https://www.postman.com/downloads/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong><strong>Mock</strong></strong></p><p>在业务依赖的关系接口未开发出来时，测试人员为了保证项目的测试进度不受影响，就需要构造出来一个虚拟的接口来进行一系列的接口测试</p><p>本文参考：</p>`,113);function g(m,b){const n=t("ExternalLinkIcon");return r(),l("div",null,[c,e("p",null,[e("a",u,[a("nodejs官网"),s(n)]),e("a",p,[a("历史版本"),s(n)])]),v])}const h=d(o,[["render",g],["__file","配置开发环境.html.vue"]]);export{h as default};
