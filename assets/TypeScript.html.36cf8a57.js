import{_ as t,r as p,o as e,c as i,b as s,d as n,e as r,a as l}from"./app.74a5dc6f.js";const o={},c=l(`<h1 id="typescript" tabindex="-1"><a class="header-anchor" href="#typescript" aria-hidden="true">#</a> TypeScript</h1><h1 id="一、常考内容" tabindex="-1"><a class="header-anchor" href="#一、常考内容" aria-hidden="true">#</a> <strong>一、常考内容</strong></h1><p><strong><strong>常见面试内容汇总</strong></strong></p><ul><li>js项目如何升级为ts？有何影响？(参考:https://www.cnblogs.com/thyong/p/12182579.html)</li><li>ts 基础类型都哪些，他们跟js的区别</li><li>ts为什么会流行？与ECMA新规范的关系？</li><li>tslint都能配置哪些功能？对开发流程有何影响？</li><li>如何使用js实现类型约束，枚举等特性么？(仅需要在 变量、函数的参数、函数的返回值 位置加上...:类型...)</li><li>如何理解接口，泛型?</li></ul><h1 id="二、typescript面试题汇总" tabindex="-1"><a class="header-anchor" href="#二、typescript面试题汇总" aria-hidden="true">#</a> <strong>二、TypeScript面试题汇总</strong></h1><p><strong><strong>什么是Typescript？</strong></strong></p><p>Typescript是强类型的Javascript超集，支持ES6语法，支持面向对象编程的概念，如类、接口、继承、泛型等。Typescript并不直接在浏览器上运行，需要编译器编译成纯Javascript来运行。</p><p>TypeScript可以在任何浏览器、主机和操作系统上执行。TypeScript不是直接在浏览器上运行的。它需要一个编译器来编译和生成JavaScript文件。TypeScript是带有一些附加特性的ES6 JavaScript版本。</p><p><strong><strong>TypeScript和JavaScript有什么不同？</strong></strong></p><p>TypeScript与JavaScript的区别如下:</p><table><thead><tr><th>序号</th><th>JavaScript</th><th>TypeScript</th></tr></thead><tbody><tr><td>1</td><td>JavaScript不支持ES6。</td><td>TypeScript 支持ES6。</td></tr><tr><td>2</td><td>它不支持强类型或静态类型。</td><td>它支持强类型或静态类型特性。</td></tr><tr><td>3</td><td>它只是一种脚本语言。</td><td>它支持面向对象的编程概念，如类、接口、继承、泛型等。</td></tr><tr><td>4</td><td>JavaScript没有可选的参数特性。</td><td>TypeScript有可选的参数特性。</td></tr><tr><td>5</td><td>它是解释语言，这就是为什么它在运行时突出显示错误。</td><td>它编译代码并在开发期间突出显示错误。</td></tr><tr><td>6</td><td>JavaScript不支持模块。</td><td>TypeScript支持模块。</td></tr><tr><td>7</td><td>在这里，number和string是对象。</td><td>在这里，number和string是接口。</td></tr><tr><td>8</td><td>JavaScript不支持泛型。</td><td>TypeScript支持泛型。</td></tr></tbody></table><p><strong><strong>我们为什么需要TypeScript？</strong></strong></p><ul><li>TypeScript快速、简单，最重要的是，容易学习。</li><li>TypeScript支持面向对象的编程特性，比如类、接口、继承、泛型等等。</li><li>TypeScript在编译时提供了错误检查功能。它将编译代码，如果发现任何错误，它将在运行脚本之前突出显示这些错误。</li><li>TypeScript支持所有JavaScript库，因为它是JavaScript的超集。</li><li>TypeScript通过使用继承来支持可重用性。</li><li>TypeScript使应用程序开发尽可能的快速和简单，并且TypeScript的工具支持为我们提供了自动完成、类型检查和源文档。</li><li>TypeScript支持最新的JavaScript特性，包括ECMAScript 2015。</li><li>TypeScript提供了ES6的所有优点和更高的生产力。</li><li>TypeScript支持静态类型、强类型、模块、可选参数等。</li></ul><p><strong><strong>列出Typescript的一些特性</strong></strong></p><p><strong><strong>列出使用Typescript的一些优点?</strong></strong></p><ul><li>它提供了可选静态类型的优点。在这里，Typescript提供了可以添加到变量、函数、属性等的类型。</li><li>Typescript能够编译出一个能在所有浏览器上运行的JavaScript版本。</li><li>TypeScript总是在编译时强调错误，而JavaScript在运行时指出错误。</li><li>TypeScript支持强类型或静态类型，而这不是在JavaScript中。</li><li>它有助于代码结构。</li><li>它使用基于类的面向对象编程。</li><li>它提供了优秀的工具支持和智能感知，后者在添加代码时提供活动提示。</li><li>它通过定义模块来定义名称空间概念。</li></ul><p><strong><strong>Typescript的缺点是什么?</strong></strong></p><ul><li>TypeScript需要很长时间来编译代码。</li><li>TypeScript不支持抽象类。</li><li>如果我们在浏览器中运行TypeScript应用程序，需要一个编译步骤将TypeScript转换成JavaScript。</li><li>Web开发人员使用了几十年的JavaScript，而TypeScript不是都是新东西。</li><li>要使用任何第三方库，必须使用定义文件。并不是所有第三方库都有可用的定义文件。</li><li>类型定义文件的质量是一个问题，即如何确保定义是正确的?</li></ul><p><strong><strong>TypeScript的不同组件是什么?</strong></strong></p><p>TypeScript主要有三个组件。</p><ul><li>语言language：该语言由新语法、关键字、类型注释等元素组成，允许我们编写TypeScript。</li><li>编译器compiler：TypeScript编译器是开源的、跨平台的，是用TypeScript编写的。它将用TypeScript编写的代码转换为JavaScript代码。它执行从TypeScript代码到JavaScript代码的解析和类型检查。它还可以帮助将不同的文件连接到单个输出文件，并生成源映射。</li><li>语言服务language service：语言服务提供信息，帮助编辑器和其他工具提供更好的辅助功能，如自动重构和智能感知。</li></ul><p><strong><strong>Typescript是谁开发的，目前稳定的Typescript版本是什么？</strong></strong></p><p>typescript是由Anders Hejlsberg开发的，他也是c#语言开发团队的核心成员之一。typescript于2012年10月1日发布，被标记为0.8版。它是由Microsoft在Apache 2许可下开发和维护的。它是为开发大型应用程序而设计的。</p><p>目前稳定的TypeScript版本是3.2，于2018年9月30日发布。Typescript编译成简单的JavaScript代码，可以在任何支持ECMAScript 2015框架的浏览器上运行。它支持最新的和不断发展的JavaScript特性。</p><p><strong><strong>列出在Typescript中的内置类型</strong></strong></p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code>数字类型<span class="token operator">:</span> 用于表示数字类型值。TypeScript中的所有数字都存储为浮点值。
语法<span class="token operator">:</span> <span class="token keyword">let</span>标识符<span class="token operator">:</span><span class="token builtin">number</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
字符串类型<span class="token operator">:</span> 它表示存储为Unicode <span class="token constant">UTF</span><span class="token operator">-</span><span class="token number">16</span>代码的字符序列。我们通过将字符串括在单引号或双引号中来在脚本中包含字符串。
语法<span class="token operator">:</span> <span class="token keyword">let</span>标识符<span class="token operator">:</span>字符串<span class="token operator">=</span> ” “<span class="token punctuation">;</span>
布尔类型<span class="token operator">:</span> 用于表示逻辑值。当我们使用布尔类型时，我们只得到真或假的输出。布尔值是一个真值，它指定条件是否为真。
语法<span class="token operator">:</span> <span class="token keyword">let</span>标识符<span class="token operator">:</span>bool <span class="token operator">=</span>布尔值<span class="token punctuation">;</span>
Null类型<span class="token operator">:</span> Null表示值未定义的变量。不能直接引用空类型值本身。空类型没有用处，因为我们只能为它分配一个空值。
语法<span class="token operator">:</span> <span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
未定义类型<span class="token operator">:</span> 它是未定义字面量的类型。未定义的类型表示所有未初始化的变量。它是没有用的，因为我们只能分配一个未定义的值给它。这种内置类型是所有类型的子类型。
语法<span class="token operator">:</span> <span class="token keyword">let</span> num<span class="token operator">:</span> <span class="token builtin">number</span> <span class="token operator">=</span>未定义<span class="token punctuation">;</span>
Void类型<span class="token operator">:</span> Void是不返回任何类型值的函数的返回类型。如果没有可用的数据类型，则使用它。
语法<span class="token operator">:</span> <span class="token keyword">let</span> unusable<span class="token operator">:</span><span class="token keyword">void</span> <span class="token operator">=</span>未定义<span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><strong>Typescript中的变量是什么？如何在Typescript中创建变量？</strong></strong></p><p>变量是存储位置，用于存储要被程序引用和使用的值/信息。它充当程序中值的容器。可以使用var关键字声明它。它应该在使用前声明。在Typescript中声明变量时，应该遵循某些规则-</p><ul><li>变量名必须是字母或数字。</li><li>变量名不能以数字开头。</li><li>变量名不能包含空格和特殊字符，除了下划线(_)和美元($)符号。</li></ul><p>我们可以通过以下四种方式之一声明一个变量:</p><ul><li>在一条语句中声明类型和值。语法:var [identifier]: [type-annotation] = value;</li><li>声明没有值的类型。语法:var [identifier]: [type-annotation];</li><li>在没有类型的情况下声明它的值。语法:var [identifier] = value;</li><li>声明没有值和类型。语法:var(标识符);</li></ul><p><strong><strong>如何编译Typescript文件？</strong></strong></p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code>tsc helloworld<span class="token punctuation">.</span>ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong><strong>能否自动编译.ts文件，并实时修改.ts文件？</strong></strong></p><p>这是可以的，自动实时根据.ts文件变化自动编译.ts文件是可以的。这可以通过使用——watch compiler选项来实现</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code>tsc <span class="token operator">--</span>watch file1<span class="token punctuation">.</span>ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上面的命令首先编译file1为file1.js，并注意文件的变化，如果检测到任何更改，它将再次编译文件。这里，我们需要确保在使用——watch选项运行时命令提示符不能关闭。</p><p><strong><strong>TS的接口是什么意思？参照TS来解释它们。</strong></strong></p><p>接口是在我们的应用程序中充当契约的结构。它定义了要遵循的类的语法，这意味着实现接口的类必须实现它的所有成员。它不能被实例化，但是可以被实现它的类对象引用。无论对象是否具有特定的结构，TypeScript编译器都使用接口进行类型检查(也称为“duck typing”鸭子类型或“结构化子类型”)。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code>interfaceinterface_name <span class="token punctuation">{</span>
    <span class="token comment">// 字段声明</span>
    <span class="token comment">// 方法声明</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接口只是声明方法和字段，它不能用来建造任何东西。不需要将接口转换为JavaScript来执行，它们对运行时JavaScript没有任何影响。因此，它们的唯一目的是在开发阶段提供帮助。</p><p><strong><strong>你如何理解Typescript中的类？列出类的一些特性。</strong></strong></p><p>我们知道，TypeScript是一种面向对象的JavaScript语言，支持OOP编程特性，比如类、接口等。与Java一样，类是用于创建可重用组件的基本实体。它是一组具有公共属性的对象。类是创建对象的模板或蓝图。它是一个逻辑实体。“class”关键字用于在Typescript中声明一个类。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code>
<span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>
    studCode<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
    studName<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>code<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>studName <span class="token operator">=</span> name<span class="token punctuation">;</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>studCode <span class="token operator">=</span> code<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token function">getGrade</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;A+&quot;</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>类的特征是-</p><ul><li>继承</li><li>封装</li><li>多态性</li><li>抽象</li></ul><p><strong><strong>TypeScript支持哪些面向对象的术语？</strong></strong></p><p>TypeScript支持以下面向对象的术语。</p><ul><li>模块</li><li>类</li><li>接口</li><li>继承</li><li>数据类型</li><li>成员函数</li></ul><p><strong><strong>如何从TypeScript的子类调用基类构造函数？</strong></strong></p><p>super()函数的作用是: 从子类中调用父类或基类构造函数。</p><p><strong><strong>如何在TypeScript中实现继承？</strong></strong></p><p>继承是一种从另一个类获取一个类的属性和行为的机制。它是OOPs语言的一个重要方面，并且具有从现有类创建新类的能力，继承成员的类称为基类，继承这些成员的类称为派生类。</p><p>继承可以通过使用extend关键字来实现。我们可以通过下面的例子来理解它。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code>classShape <span class="token punctuation">{</span>
    Area<span class="token operator">:</span><span class="token builtin">number</span>
    <span class="token function">constructor</span><span class="token punctuation">(</span>area<span class="token operator">:</span><span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>Area <span class="token operator">=</span> area
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">class</span> <span class="token class-name">Circle</span> extendsShape <span class="token punctuation">{</span>
    <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token keyword">void</span> <span class="token punctuation">{</span>
        <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;圆的面积: &quot;</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>Area<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">320</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
obj<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong><strong>Typescript中的模块是什么？</strong></strong></p><p>模块是创建一组相关变量、函数、类和接口等的强大方法。它可以在它们自己的范围内执行，而不是在全局范围内。换句话说，在模块中声明的变量、函数、类和接口不能在模块外部直接访问。</p><p><strong><strong>什么是混合mixin？</strong></strong></p><p>在Javascript中，mixin是一种从可重用组件构建类的方法，通过组合称为mixin的更简单的部分类来构建它们。</p><p>这个想法很简单，不是类a扩展类B来获得它的功能，而是函数B获取类a并返回一个新类，这个类具有这个添加的功能。函数B是一个混合函数。</p>`,60),d={href:"https://blog.csdn.net/sd19871122/article/details/107580998",target:"_blank",rel:"noopener noreferrer"};function u(v,k){const a=p("ExternalLinkIcon");return e(),i("div",null,[c,s("p",null,[n("本文参考"),s("a",d,[n("TypeScript面试题合集"),r(a)])])])}const m=t(o,[["render",u],["__file","TypeScript.html.vue"]]);export{m as default};
